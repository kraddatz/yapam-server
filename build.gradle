import java.time.LocalDateTime

buildscript {
    ext {
        activationVersion = '1.1.1'
        buildTime = LocalDateTime.now().toString()
        commonsioVersion = '2.6'
        jacksonDatatypeVersion = '2.9.8'
        javaJaxbVersion = '2.3.1'
        javaVersion = '11'
        jaxbCoreVersion = '2.3.0.1'
        jaxbImplVersion = '2.3.2'
        jaxenVersion = '1.2.0'
        junitVersion = '5.3.1'
        jwtVersion = '1.0.10.RELEASE'
        liquibaseVersion = '3.6.3'
        lombokVersion = '1.18.6'
        mockitoVersion = '2.27.0'
        mysqlConnectorVersion = '8.0.16'
        springBootVersion = '2.1.4.RELEASE'
        springCloudVersion = '2.1.1.RELEASE'
        springFoxVersion = '2.9.2'
        springOauthVersion = '2.3.5.RELEASE'
        tomcatVersion = '9.0.17'
    }
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'application'
    id 'eclipse'
    id 'idea'
    id 'io.franzbecker.gradle-lombok' version '3.0.0'
    id 'io.spring.dependency-management' version '1.0.7.RELEASE'
    id 'jacoco'
    id 'java'
    id 'maven'
    id 'org.liquibase.gradle' version '2.0.1'
    id 'org.sonarqube' version '2.7'
    id 'org.springframework.boot' version '2.1.4.RELEASE'
}

lombok {
    version = "${lombokVersion}"
}

version = '0.0.1-SNAPSHOT'
group = 'app.yapam'
sourceCompatibility = 11
targetCompatibility = 11
mainClassName = 'app.yapam.YapamApplication'

bootJar {
    archiveFileName.set('yapam.jar')
}

repositories {
    mavenCentral()
    jcenter()
}

springBoot {
    buildInfo()
}

sonarqube {
    properties {
        property 'sonar.coverage.exclusions',
                "**/app/yapam/YapamApplication.java," +
                "**/app/yapam/config/**," +
                "**/app/yapam/common/error/**," +
                "**/app/yapam/swagger/**," +
                "**/app/yapam/**/model/**," +
                "**/app/yapam/**/repository/*.java"
    }
}

test {
    useJUnitPlatform {
    }
}

import org.apache.tools.ant.filters.ReplaceTokens
processResources {
    with copySpec {
        from 'src/main/resources'
        include '**/application*.yml'
        include '**/application*.yaml'
        include '**/application*.properties'
        project.properties.findAll().each {
            prop ->
                if (prop.value != null) {
                    filter(ReplaceTokens, tokens: [ (prop.key): prop.value])
                    filter(ReplaceTokens, tokens: [ ('project.' + prop.key): prop.value])
                }
        }
    }
}

task createPom {
    outputs.file "pom.xml"
    inputs.property('group', project.group)
    inputs.property('name', project.name)
    inputs.property('version', project.version)

    doLast {
        pom {
            project {
                groupId inputs.properties['group']
                artifactId inputs.properties['name']
                version inputs.properties['version']
            }
        }.writeTo("pom.xml")
    }
}

assemble.dependsOn createPom

ext['tomcat.version'] = "${tomcatVersion}"

dependencies {
    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: "${springBootVersion}"
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: "${jacksonDatatypeVersion}"
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: "${jacksonDatatypeVersion}"
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: "${jacksonDatatypeVersion}"
    implementation group: 'com.sun.xml.bind', name: 'jaxb-core', version: "${jaxbCoreVersion}"
    implementation group: 'com.sun.xml.bind', name: 'jaxb-impl', version: "${jaxbImplVersion}"
    implementation group: 'commons-io', name: 'commons-io', version: "${commonsioVersion}"
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: "${springFoxVersion}"
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: "${springFoxVersion}"
    implementation group: 'javax.activation', name: 'activation', version: "${activationVersion}"
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: "${javaJaxbVersion}"
    implementation group: 'jaxen', name: 'jaxen', version: "${jaxenVersion}"
    implementation group: 'mysql', name: 'mysql-connector-java', version: "${mysqlConnectorVersion}"
    implementation group: 'org.liquibase', name: 'liquibase-core', version: "${liquibaseVersion}"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: "${springBootVersion}"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: "${springBootVersion}"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: "${springBootVersion}"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: "${springBootVersion}"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "${springBootVersion}"
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: "${springCloudVersion}"
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: "${springCloudVersion}"
    implementation group: 'org.springframework.security', name: 'spring-security-jwt', version: "${jwtVersion}"
    implementation group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: "${springOauthVersion}"

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${junitVersion}"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: "${junitVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-core', version : "${mockitoVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: "${mockitoVersion}"
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "${springBootVersion}"

    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${junitVersion}"
}

bootRun {
    bootRun.systemProperty 'spring.profiles.active', 'local'
    bootRun.systemProperty 'spring.config.location', 'classpath:application-local.yaml,file:./yapam.yaml'
}
