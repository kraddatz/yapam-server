task createPom {
    outputs.file "pom.xml"
    inputs.property('group', project.group)
    inputs.property('name', project.name)
    inputs.property('version', project.version)

    doLast {
        pom {
            project {
                groupId inputs.properties['group']
                artifactId inputs.properties['name']
                version inputs.properties['version']
            }
        }.writeTo("pom.xml")
    }
}

assemble.dependsOn createPom


jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            "**/app/yapam/YapamApplication.class",
                            "**/app/yapam/config/**",
                            "**/app/yapam/common/error/**",
                            "**/app/yapam/swagger/**",
                            "**/app/yapam/**/model/**",
                            "**/app/yapam/**/repository/*.class",
                    ])
        })
    }
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories =  files(sourceSets.main.output)
    executionData = files(jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            "**/app/yapam/YapamApplication.class",
                            "**/app/yapam/config/**",
                            "**/app/yapam/common/error/**",
                            "**/app/yapam/swagger/**",
                            "**/app/yapam/**/model/**",
                            "**/app/yapam/**/repository/*.class",
                    ])
        })
    }
}